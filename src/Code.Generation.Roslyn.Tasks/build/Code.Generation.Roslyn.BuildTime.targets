<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <CodeGenerationToolingFullName>dotnet-codegen</CodeGenerationToolingFullName>
    <CodeGenerationToolFullName>Code.Generation.Roslyn.Tool</CodeGenerationToolFullName>
    <CodeGenerationGeneratedExtension>.g</CodeGenerationGeneratedExtension>
    <CodeGenerationAssemblyReferenceExtension>.a</CodeGenerationAssemblyReferenceExtension>
    <CodeGenerationRegistryExtension>.json</CodeGenerationRegistryExtension>
    <CodeGenerationResponseFileExtension>.rsp</CodeGenerationResponseFileExtension>
    <GenerateCodeFromAttributesDependencies>
      PrepareToGenerateCodeFromAttributes
      ;InvokeCodeGenerationFromAttributes
      ;CompileCodeGenerationGeneratedCode
    </GenerateCodeFromAttributesDependencies>
    <!-- Literally, Response File items separated by Carriage Return Line Feed. -->
    <CodeGenerationResponseFileLineSeparator>%0d%0a</CodeGenerationResponseFileLineSeparator>
  </PropertyGroup>

  <PropertyGroup>
    <!-- So that we are not having to make any intermediate directories. -->
    <CodeGenToolIntermediateOutputDirectory>$(IntermediateOutputPath)</CodeGenToolIntermediateOutputDirectory>
    <CodeGenToolOutputBaseFileName>$(MSBuildProjectFile)</CodeGenToolOutputBaseFileName>
    <CodeGenToolCompilationRegistryFileName>$(CodeGenToolOutputBaseFileName)$(CodeGenerationGeneratedExtension)$(CodeGenerationRegistryExtension)</CodeGenToolCompilationRegistryFileName>
    <CodeGenToolCompilationRegistryPath>$(CodeGenToolIntermediateOutputDirectory)$(CodeGenToolCompilationRegistryFileName)</CodeGenToolCompilationRegistryPath>
    <CodeGenToolCompilationResponseFileName>$(CodeGenToolOutputBaseFileName)$(CodeGenerationGeneratedExtension)$(CodeGenerationRegistryExtension)</CodeGenToolCompilationResponseFileName>
    <CodeGenToolCompilationResponsePath>$(CodeGenToolIntermediateOutputDirectory)$(CodeGenToolCompilationResponseFileName)</CodeGenToolCompilationResponsePath>
    <CodeGenToolAssemblyReferenceRegistryFileName>$(CodeGenToolOutputBaseFileName)$(CodeGenerationAssemblyReferenceExtension)$(CodeGenerationRegistryExtension)</CodeGenToolAssemblyReferenceRegistryFileName>
    <CodeGenToolAssemblyReferenceRegistryPath>$(CodeGenToolIntermediateOutputDirectory)$(CodeGenToolAssemblyReferenceRegistryFileName)</CodeGenToolAssemblyReferenceRegistryPath>
    <CodeGenToolResponseFileName>$(CodeGenToolOutputBaseFileName)$(CodeGenerationResponseFileExtension)</CodeGenToolResponseFileName>
    <CodeGenToolResponsePath>$(CodeGenToolIntermediateOutputDirectory)$(CodeGenToolResponseFileName)</CodeGenToolResponsePath>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Which the `tool´ build needs to yield literally, `dotnet-codegen´ for its assembly output. -->
    <DotnetCodeGenerationToolPath Condition="'$(DotnetCodeGenerationToolPath)' == ''">codegen</DotnetCodeGenerationToolPath>
  </PropertyGroup>

  <!-- Rolls up the Targets into the front-facing Code Generation Target. -->
  <Target Name="GenerateCodeFromAttributes" DependsOnTargets="$(GenerateCodeFromAttributesDependencies)" BeforeTargets="CoreCompile;PrepareResources" />

  <!-- ReSharper disable once UnknownTarget -->
  <Target Name="PrepareToGenerateCodeFromAttributes" DependsOnTargets="ResolveReferences">
    <Message Text="Preparing to run code generation using intermediate directory `$(CodeGenToolIntermediateOutputDirectory)´ ..." Importance="normal" />
    <ItemGroup>
      <!-- ReSharper disable once UnknownProperty -->
      <CodeGenCompilationDefineConstants Include="$(DefineConstants)" />
      <CodeGenCompilationInputsFromAttributes Include="@(Compile)" Condition="'%(Compile.Generator)' == 'MSBuild:GenerateCodeFromAttributes'" />
    </ItemGroup>
    <PropertyGroup>
      <!-- TODO: TBD: perhaps we do not need to quote-enclose the arguments? -->
      <!-- ReSharper disable once UnknownItemGroup -->
      <_CodeGenToolResponseFileContent>
--project
$(MSBuildProjectDirectory)
--output
$(CodeGenToolIntermediateOutputDirectory)
--generated
$(CodeGenToolCompilationRegistryFileName)
--assemblies
$(CodeGenToolAssemblyReferenceRegistryFileName)
@(ReferencePath->'--reference$(CodeGenerationResponseFileLineSeparator)%(Identity)', '$(CodeGenerationResponseFileLineSeparator)')
@(CodeGenCompilationDefineConstants->'--define$(CodeGenerationResponseFileLineSeparator)%(Identity)', '$(CodeGenerationResponseFileLineSeparator)')
@(GeneratorAssemblySearchPaths->'--search$(CodeGenerationResponseFileLineSeparator)%(Identity)', '$(CodeGenerationResponseFileLineSeparator)')
@(CodeGenCompilationInputsFromAttributes->'--source$(CodeGenerationResponseFileLineSeparator)(Identity)', '$(CodeGenerationResponseFileLineSeparator)')
      </_CodeGenToolResponseFileContent>
      <_GenerateCodeToolVersion>(n/a)</_GenerateCodeToolVersion>
    </PropertyGroup>
    <!-- Must make the Intermediate Output Directory because the invoking context may not have output directory comprehension. -->
    <MakeDir Directories="$(CodeGenToolIntermediateOutputDirectory)" Condition="!Exists('$(CodeGenToolIntermediateOutputDirectory)')" />
    <!-- Write the response file with arguments for dotnet-codegen. -->
    <WriteLinesToFile File="$(CodeGenToolResponsePath)" Lines="$(_CodeGenToolResponseFileContent)" Overwrite="true" />
    <!-- TODO: TBD: for now, do not delete the Compilation Registry... This helps preclude unnecessarily regenerating code... -->
    <!-- TODO: TBD: if anything, maybe we also respond to 'Clean' target requests in order to do this bit... -->
    <!--<Delete Condition="Exists('$(CodeGenToolCompilationRegistryPath)')" Files="$(CodeGenToolCompilationRegistryPath)" ContinueOnError="true" />-->
    <!-- Verify and report the tool version. -->
    <Exec Command="dotnet $(DotnetCodeGenerationToolPath) --version" ConsoleToMSBuild="true" StandardOutputImportance="normal" ContinueOnError="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="_GenerateCodeToolVersion" />
    </Exec>
    <Message Text="Running $(CodeGenerationToolFullName) v$(_GenerateCodeToolVersion) ..." Importance="normal" />
  </Target>

  <Target Name="InvokeCodeGenerationFromAttributes" DependsOnTargets="PrepareToGenerateCodeFromAttributes" Condition="'@(CodeGenCompilationInputsFromAttributes)' != ''">
    <PropertyGroup>
      <_CodeGenWarning>CGR1000</_CodeGenWarning>
      <_CodeGenToolWarningText>$(CodeGenerationToolingFullName): Failed to yield code generation artifacts, please check https://github.com/mwpowellhtx/Code.Generation.Roslyn for usage instructions.</_CodeGenToolWarningText>
    </PropertyGroup>
    <!-- Run the tool using the Response File, which we do need an Argument for, and evaluate the expected outcome. -->
    <Exec Command="dotnet $(DotnetCodeGenerationToolPath) --response &quot;%40$(CodeGenToolResponsePath)&quot;" StandardOutputImportance="normal"  ContinueOnError="true" />
    <Warning Code="$(_CodeGenWarning)" Text="$(_CodeGenToolWarningText)" Condition="!(Exists('$(CodeGenToolCompilationRegistryPath)') And Exists('$(CodeGenToolCompilationResponsePath)') And Exists('$(CodeGenToolAssemblyReferenceRegistryPath))'))" />
  </Target>

  <Target Name="CompileCodeGenerationGeneratedCode" DependsOnTargets="InvokeCodeGenerationFromAttributes" Condition="Exists('$(CodeGenToolCompilationResponsePath)')">
    <ReadLinesFromFile File="$(CodeGenToolCompilationResponsePath)">
      <Output TaskParameter="Lines" ItemName="_CodeGenToolCompilationGeneratedInputFiles" />
    </ReadLinesFromFile>
    <ReadLinesFromFile File="$(CodeGenToolCompilationResponsePath)">
      <Output TaskParameter="Lines" ItemName="FileWrites" />
    </ReadLinesFromFile>
    <ItemGroup>
      <Compile Include="@(_CodeGenToolCompilationGeneratedInputFiles)" />
      <FileWrites Include="$(CodeGenToolCompilationResponsePath)" />
    </ItemGroup>
  </Target>

</Project>
