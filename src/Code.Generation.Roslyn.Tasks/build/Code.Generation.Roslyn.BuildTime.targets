<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <CodeGenerationToolingFullName>dotnet-cgr</CodeGenerationToolingFullName>
    <CodeGenerationToolFullName>Code.Generation.Roslyn.Tool</CodeGenerationToolFullName>
    <CodeGenerationGeneratedExtension>.g</CodeGenerationGeneratedExtension>
    <CodeGenerationAssemblyReferenceExtension>.a</CodeGenerationAssemblyReferenceExtension>
    <CodeGenerationRegistryExtension>.json</CodeGenerationRegistryExtension>
    <CodeGenerationResponseFileExtension>.rsp</CodeGenerationResponseFileExtension>
    <GenerateCodeFromAttributesDependencies>
      PrepareCodeGenPropertyGroups
      ;PrepareToGenerateCodeFromAttributes
      ;InvokeCodeGenerationFromAttributes
      ;CompileCodeGenerationGeneratedCode
    </GenerateCodeFromAttributesDependencies>
  </PropertyGroup>

  <Target Name="PrepareCodeGenPropertyGroups">
    <PropertyGroup>
      <!-- So that we are not having to make any intermediate directories. -->
      <CodeGenToolIntermediateOutputDirectory>$(IntermediateOutputPath)</CodeGenToolIntermediateOutputDirectory>
      <CodeGenToolOutputBaseFileName>$(MSBuildProjectFile)</CodeGenToolOutputBaseFileName>
      <CodeGenToolGeneratedRegistryFileName>$(CodeGenToolOutputBaseFileName)$(CodeGenerationGeneratedExtension)$(CodeGenerationRegistryExtension)</CodeGenToolGeneratedRegistryFileName>
      <CodeGenToolCompilationRegistryPath>$(IntermediateOutputPath)$(CodeGenToolGeneratedRegistryFileName)</CodeGenToolCompilationRegistryPath>
      <CodeGenToolAssemblyReferenceRegistryFileName>$(CodeGenToolOutputBaseFileName)$(CodeGenerationAssemblyReferenceExtension)$(CodeGenerationRegistryExtension)</CodeGenToolAssemblyReferenceRegistryFileName>
      <CodeGenToolAssemblyReferenceRegistryPath>$(IntermediateOutputPath)$(CodeGenToolAssemblyReferenceRegistryFileName)</CodeGenToolAssemblyReferenceRegistryPath>
      <CodeGenToolCommandLineArgumentsResponseFileName>$(CodeGenToolOutputBaseFileName)$(CodeGenerationResponseFileExtension)</CodeGenToolCommandLineArgumentsResponseFileName>
      <CodeGenToolCommandLineArgumentsResponsePath>$(IntermediateOutputPath)$(CodeGenToolCommandLineArgumentsResponseFileName)</CodeGenToolCommandLineArgumentsResponsePath>
      <CodeGenToolCompilationResponseFileName>$(CodeGenToolOutputBaseFileName)$(CodeGenerationGeneratedExtension)$(CodeGenerationResponseFileExtension)</CodeGenToolCompilationResponseFileName>
      <CodeGenToolCompilationResponsePath>$(IntermediateOutputPath)$(CodeGenToolCompilationResponseFileName)</CodeGenToolCompilationResponsePath>
    </PropertyGroup>
  </Target>

  <Target Name="PrepareCodeGenCleanTargets" DependsOnTargets="PrepareCodeGenPropertyGroups">
    <!-- Must make the Intermediate Output Directory because the invoking context may not have output directory comprehension. -->
    <MakeDir Directories="$(IntermediateOutputPath)" Condition="!Exists('$(IntermediateOutputPath)')" />
  </Target>

  <Target Name="CleanCodeGenToolCommandLineArgumentsResponse" DependsOnTargets="PrepareCodeGenCleanTargets" AfterTargets="Clean">
    <!-- We keep the Path/Message pairings close to each other, which we have also found helps reading comprehension. -->
    <PropertyGroup>
      <_CodeGenToolCommandLineArgumentsResponsePath>$(MSBuildProjectDirectory)\$(CodeGenToolCommandLineArgumentsResponsePath)</_CodeGenToolCommandLineArgumentsResponsePath>
      <_CodeGenToolCommandLineArgumentsResponseMessage Condition="Exists('$(_CodeGenToolCommandLineArgumentsResponsePath)')">Code Generation command line arguments response file cleaned.</_CodeGenToolCommandLineArgumentsResponseMessage>
    </PropertyGroup>
    <!-- It appears as though Source Files are cleaned, however, artifacts such as Response Files, JSON registries, are not. -->
    <Delete Files="$(_CodeGenToolCommandLineArgumentsResponsePath)" Condition="Exists('$(_CodeGenToolCommandLineArgumentsResponsePath)')" />
    <Message Text="$(_CodeGenToolCommandLineArgumentsResponseMessage)" Condition="'$(_CodeGenToolCommandLineArgumentsResponseMessage)' != ''" Importance="high" />
  </Target>

  <Target Name="CleanCodeGenToolCompilationRegistry" DependsOnTargets="PrepareCodeGenCleanTargets" AfterTargets="Clean">
    <!-- Ditto `Clean´ target groups... -->
    <PropertyGroup>
      <_CodeGenToolCompilationRegistryPath>$(MSBuildProjectDirectory)\$(CodeGenToolCompilationRegistryPath)</_CodeGenToolCompilationRegistryPath>
      <_CodeGenToolCompilationRegistryMessage Condition="Exists('$(_CodeGenToolCompilationRegistryPath)')">Code Generation compilation registry file cleaned.</_CodeGenToolCompilationRegistryMessage>
    </PropertyGroup>
    <Delete Files="$(_CodeGenToolCompilationRegistryPath)" Condition="Exists('$(_CodeGenToolCompilationRegistryPath)')" />
    <Message Text="$(_CodeGenToolCompilationRegistryMessage)" Condition="'$(_CodeGenToolCompilationRegistryMessage)' != ''" Importance="high" />
  </Target>

  <Target Name="CleanCodeGenToolAssemblyReferenceRegistry" DependsOnTargets="PrepareCodeGenCleanTargets" AfterTargets="Clean">
    <!-- Ditto `Clean´ target groups... -->
    <PropertyGroup>
      <_CodeGenToolAssemblyReferenceRegistryPath>$(MSBuildProjectDirectory)\$(CodeGenToolAssemblyReferenceRegistryPath)</_CodeGenToolAssemblyReferenceRegistryPath>
      <_CodeGenToolAssemblyReferenceRegistryMessage Condition="Exists('$(_CodeGenToolAssemblyReferenceRegistryPath)')">Code Generation assembly reference registry cleaned.</_CodeGenToolAssemblyReferenceRegistryMessage>
    </PropertyGroup>
    <Delete Files="$(_CodeGenToolAssemblyReferenceRegistryPath)" Condition="Exists('$(_CodeGenToolAssemblyReferenceRegistryPath)')" />
    <Message Text="$(_CodeGenToolAssemblyReferenceRegistryMessage)" Condition="'$(_CodeGenToolAssemblyReferenceRegistryMessage)' != ''" Importance="high" />
  </Target>

  <Target Name="CleanCodeGenToolCompilationResponse" DependsOnTargets="PrepareCodeGenCleanTargets" BeforeTargets="Clean">
    <!-- Ditto `Clean´ target groups... Although, Compilation Response file appears to be cleaned up by `Clean´. -->
    <PropertyGroup>
      <_CodeGenToolCompilationResponsePath>$(MSBuildProjectDirectory)\$(CodeGenToolCompilationResponsePath)</_CodeGenToolCompilationResponsePath>
      <_CodeGenToolCompilationResponseMessage Condition="Exists('$(_CodeGenToolCompilationResponsePath)')">Code Generation compilation response file cleaned.</_CodeGenToolCompilationResponseMessage>
    </PropertyGroup>
    <Delete Files="$(_CodeGenToolCompilationResponsePath)" Condition="Exists('$(_CodeGenToolCompilationResponsePath)')" />
    <Message Text="$(_CodeGenToolCompilationResponseMessage)" Condition="'$(_CodeGenToolCompilationResponseMessage)' != ''" Importance="high" />
  </Target>

  <!-- ReSharper disable UnknownProperty -->
  <PropertyGroup>
    <!-- Which the `tool´ build needs to yield literally, `dotnet-cgr´ for its assembly output. -->
    <DotnetCodeGenerationToolPath Condition="'$(DotnetCodeGenerationToolPath)' == ''">codegen</DotnetCodeGenerationToolPath>
    <DotnetCommandLineSwitches Condition="'$(DotnetCommandLineSwitches)' != ''"></DotnetCommandLineSwitches>
  </PropertyGroup>
  <!-- ReSharper restore UnknownProperty -->

  <!-- TODO: TBD: do we really need to do this before CoreCompile and/or PrepareResources targets? Or just prior to Build? -->
  <!-- TODO: TBD: which, at the moment, we really do we see this being re-established, even following a `Clean´ build target. -->
  <!-- Rolls up the Targets into the front-facing Code Generation Target. -->
  <Target Name="GenerateCodeFromAttributes" DependsOnTargets="$(GenerateCodeFromAttributesDependencies)" BeforeTargets="CoreCompile;PrepareResources" />

  <!-- ReSharper disable once UnknownTarget -->
  <Target Name="PrepareToGenerateCodeFromAttributes" DependsOnTargets="ResolveReferences;PrepareCodeGenPropertyGroups">
    <Message Text="Preparing to run code generation using intermediate directory `$(IntermediateOutputPath)´ ..." Importance="high" />
    <ItemGroup>
      <!-- ReSharper disable once UnknownProperty -->
      <CodeGenCompilationDefineConstants Include="$(DefineConstants)" />
      <CodeGenCompilationInputsFromAttributes Include="@(Compile)" Condition="'%(Compile.Generator)' == 'MSBuild:GenerateCodeFromAttributes'" />
    </ItemGroup>
    <PropertyGroup>
      <!-- Literally, Response File lines separated by Carriage Return Line Feed. -->
      <_CgrSep>%0d%0a</_CgrSep>
      <!-- TODO: TBD: may refactor this to the actual invocation since it reallyhas nothing to do with `preparation´ or `identifying tooling versions´... -->
      <!-- The spacing is intentional here in order to get the Response File formatted correctly as expected. -->
      <!-- ReSharper disable once UnknownItemGroup -->
      <_CodeGenToolResponseFileContent>
--project
$(MSBuildProjectDirectory)
--output
$(IntermediateOutputPath)
--generated
$(CodeGenToolGeneratedRegistryFileName)
--assemblies
$(CodeGenToolAssemblyReferenceRegistryFileName)@(ReferencePath->'$(_CgrSep)--reference$(_CgrSep)%(Identity)', '')@(CodeGenCompilationDefineConstants->'$(_CgrSep)--define$(_CgrSep)%(Identity)', '')@(GeneratorAssemblySearchPaths->'$(_CgrSep)--search$(_CgrSep)%(Identity)', '')@(CodeGenCompilationInputsFromAttributes->'$(_CgrSep)--source$(_CgrSep)%(Identity)', '')
      </_CodeGenToolResponseFileContent>
      <!-- ReSharper disable UnknownItemGroup -->
      <_CodeGenToolResponseFileContent Condition="@(CodeGenCompilationAdditionalInputs->Count()) > 0">$(_CodeGenToolResponseFileContent)@(CodeGenCompilationAdditionalInputs->'--source$(_CgrSep)%(Identity)', '')</_CodeGenToolResponseFileContent>
      <!-- ReSharper restore UnknownItemGroup -->
      <!--<_CodeGenToolResponseFileContent Condition="'$(GeneratorAssemblySearchPaths)' != ''">$(_CodeGenToolResponseFileContent)</_CodeGenToolResponseFileContent>-->
      <_GenerateCodeToolVersion>(n/a)</_GenerateCodeToolVersion>
      <_DotnetCommandLineSwitches>$(DotnetCommandLineSwitches) </_DotnetCommandLineSwitches>
    </PropertyGroup>
    <!-- Must make the Intermediate Output Directory because the invoking context may not have output directory comprehension. -->
    <MakeDir Directories="$(IntermediateOutputPath)" Condition="!Exists('$(IntermediateOutputPath)')" />
    <!-- Write the response file with arguments for dotnet-cgr. -->
    <WriteLinesToFile File="$(CodeGenToolCommandLineArgumentsResponsePath)" Lines="$(_CodeGenToolResponseFileContent)" Overwrite="true" />
    <!-- TODO: TBD: for now, do not delete the Compilation Registry... This helps preclude unnecessarily regenerating code... -->
    <!-- TODO: TBD: if anything, maybe we also respond to 'Clean' target requests in order to do this bit... -->
    <!--<Delete Condition="Exists('$(CodeGenToolCompilationRegistryPath)')" Files="$(CodeGenToolCompilationRegistryPath)" ContinueOnError="true" />-->
    <!-- Verify and report the tool version. -->
    <!-- ReSharper disable UnknownProperty -->
    <Message Text="Evaluating `dotnet $(DotnetCodeGenerationToolPath) --version´ ..." Importance="high" />
    <Exec Command="dotnet $(DotnetCodeGenerationToolPath) --version" ConsoleToMSBuild="true" StandardOutputImportance="normal" ContinueOnError="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="_GenerateCodeToolVersion" />
    </Exec>
    <!-- ReSharper restore UnknownProperty -->
    <Message Text="Running $(CodeGenerationToolFullName) v$(_GenerateCodeToolVersion) ..." Importance="high" />
  </Target>

  <!-- TODO: TBD: depending on internal targets? Or connect with the Microsoft Build `Build´ target(s)? should consider this... -->
  <Target Name="InvokeCodeGenerationFromAttributes" DependsOnTargets="PrepareToGenerateCodeFromAttributes" Condition="'@(CodeGenCompilationInputsFromAttributes)' != ''">
    <PropertyGroup>
      <_CgrWarning>CGR1000</_CgrWarning>
      <_CodeGenToolWarningText>$(CodeGenerationToolingFullName): Failed to yield code generation artifacts, please check https://github.com/mwpowellhtx/Code.Generation.Roslyn for usage instructions.</_CodeGenToolWarningText>
    </PropertyGroup>
    <!-- Run the tool using the Response File, which we do need an Argument for, and evaluate the expected outcome. -->
    <!-- ReSharper disable UnknownProperty -->
    <Message Text="Evaluating `dotnet $(DotnetCodeGenerationToolPath) --response &quot;$(CodeGenToolCommandLineArgumentsResponsePath)&quot;´ ..." Importance="high" />
    <Exec Command="dotnet $(DotnetCodeGenerationToolPath) --response &quot;$(CodeGenToolCommandLineArgumentsResponsePath)&quot;" ConsoleToMSBuild="true" StandardOutputImportance="normal" ContinueOnError="true" />
    <!-- ReSharper restore UnknownProperty -->
    <Warning Code="$(_CgrWarning)" Text="$(_CodeGenToolWarningText)" Condition="!(Exists('$(CodeGenToolCompilationRegistryPath)') And Exists('$(CodeGenToolCompilationResponsePath)') And Exists('$(CodeGenToolAssemblyReferenceRegistryPath))'))" />
  </Target>

  <!-- TODO: TBD: ditto `which targets´ ... -->
  <Target Name="CompileCodeGenerationGeneratedCode" DependsOnTargets="InvokeCodeGenerationFromAttributes" Condition="Exists('$(CodeGenToolCompilationResponsePath)')">
    <ReadLinesFromFile File="$(CodeGenToolCompilationResponsePath)">
      <Output TaskParameter="Lines" ItemName="_CodeGenToolCompilationGeneratedInputFiles" />
    </ReadLinesFromFile>
    <ReadLinesFromFile File="$(CodeGenToolCompilationResponsePath)">
      <Output TaskParameter="Lines" ItemName="FileWrites" />
    </ReadLinesFromFile>
    <ItemGroup>
      <Compile Include="@(_CodeGenToolCompilationGeneratedInputFiles)" />
      <FileWrites Include="$(CodeGenToolCompilationResponsePath)" />
    </ItemGroup>
  </Target>

</Project>
